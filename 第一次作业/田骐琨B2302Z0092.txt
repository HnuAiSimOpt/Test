import numpy as np

def PCG(A, b, M_inv=None, tol=1e-8, max_iter=None):
 
    n = b.shape[0]
    if max_iter is None:
        max_iter = n

    # Initial guess x0 (can be random, here it's zero vector)
    x = np.zeros(n)

    # r0 = b - Ax0
    r = b - np.dot(A, x)
    
    # Apply preconditioner
    if M_inv is not None:
        z = np.dot(M_inv, r)
    else:
        z = r
    
    p = z
    rs_old = np.dot(r, z)

    for i in range(max_iter):
        Ap = np.dot(A, p)
        alpha = rs_old / np.dot(p, Ap)
        x = x + alpha * p
        r = r - alpha * Ap
        
        if np.linalg.norm(r) < tol:
            print(f'Converged in {i+1} iterations.')
            break

        if M_inv is not None:
            z = np.dot(M_inv, r)
        else:
            z = r
        
        rs_new = np.dot(r, z)
        beta = rs_new / rs_old
        p = z + beta * p
        rs_old = rs_new

    return x

# Test the PCG function
A = np.array([[4, 1], [1, 3]])
b = np.array([1, 2])

# Since A is small and well-conditioned, we don't need a preconditioner.
# But for demonstration, we'll use the identity matrix as a trivial preconditioner.
M_inv = np.linalg.inv(np.eye(A.shape[0]))

c1 = np.linalg.inv(A).dot(b)
print("The math sol is", c1)

c2 = PCG(A, b, M_inv)
print("The numerical sol is", c2)