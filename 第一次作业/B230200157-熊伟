import numpy as np


def pcg(A, b, x0, tol=1e-6, max_iter=1000):
    # 初始化
    r = b - np.dot(A, x0)
    dia = np.diagonal(A)  # 取预条件矩阵为A的对角元素矩阵
    h = r.copy() / dia  # 初始预条件子为残差
    p = h.copy()  # 初始搜索方向为预条件子
    x_new = x0.copy()
    # print(diagonal)
    # 开始迭代
    number = 0
    for i in range(max_iter):
        number += 1
        alpha = np.dot(r, h) / np.dot(p, np.dot(A, p))  # 计算步长
        x_new = x0 + alpha * p  # 更新解向量
        r_new = r - alpha * np.dot(A, p)  # 更新残差
        if np.linalg.norm(r_new) < tol:  # 判断收敛条件
            break
        h_new = r_new.copy() / dia  # 更新预条件子
        beta = np.dot(r_new, h_new) / np.dot(h, r)  # 计算新的搜索方向
        h = h_new.copy()  # 更新预条件子
        p = h + beta * p  # 更新搜索方向
        r = r_new.copy()  # 更新残差
        x0 = x_new.copy()  # 更新解向量

    print("迭代次数：%d" % number)
    return x_new


# 测试
A = np.array([[4, -1, 0], [-1, 4, -1], [0, -1, 3]])
b = np.array([1, 0, 2])
x0 = np.zeros_like(b)
x = pcg(A, b, x0)
print("Solution:", x, np.array([13, 11, 31]) / 41)
